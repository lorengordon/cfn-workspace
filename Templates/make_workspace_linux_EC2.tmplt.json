{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
        "AssignInstanceRole": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "InstanceRole"
                        },
                        ""
                    ]
                }
            ]
        },
        "AssignPublicIp": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NoPublicIp"
                        },
                        "true"
                    ]
                }
            ]
        },
        "AssignStaticPrivateIp": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PrivateIp"
                        },
                        ""
                    ]
                }
            ]
        },
        "Reboot": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NoReboot"
                        },
                        "true"
                    ]
                }
            ]
        },
        "UseCfnUrl": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "CfnEndpointUrl"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseEnvironment": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "WatchmakerEnvironment"
                        },
                        ""
                    ]
                }
            ]
        },
        "UseWamConfig": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "WatchmakerConfig"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Description": "This template deploys a standalone Linux instance to host a Workspace.",
    "Mappings": {},
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "EC2 Instance Configuration"
                    },
                    "Parameters": [
                        "AmiId",
                        "InstanceType",
                        "InstanceRole",
                        "KeyPairName",
                        "NoPublicIp",
                        "NoReboot",
                        "SecurityGroupIds"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Watchmaker Configuration"
                    },
                    "Parameters": [
                        "WatchmakerConfig",
                        "WatchmakerEnvironment"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "PrivateIp",
                        "SubnetId"
                    ]
                },
                {
                    "Label": {
                        "default": "CloudFormation Configuration"
                    },
                    "Parameters": [
                        "CfnEndpointUrl"
                    ]
                }
            ],
            "ParameterLabels": {}
        }
    },
    "Outputs": {
        "Ec2InstanceId": {
            "Description": "Instance ID",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-InstanceId"
                }
            },
            "Value": {
                "Ref": "Ec2Instance"
            }
        },
        "WorkspacesIp": {
            "Description": "Workspaces's IP address",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-WorkspacesIp"
                }
            },
            "Value": {
                "Fn::GetAtt": [
                    "Ec2Instance",
                    "PrivateIp"
                ]
            }
        }
    },
    "Parameters": {
        "AdminPubkeyURL": {
            "Default": "",
            "Description": "URL of the file containing the admin users' SSH public keys.",
            "Type": "String"
        },
        "AmiId": {
            "Default": "",
            "Description": "ID of the AMI to launch",
            "Type": "AWS::EC2::Image::Id"
        },
        "CfnEndpointUrl": {
            "AllowedPattern": "^$|^http[s]?://.*$",
            "Default": "https://cloudformation.us-east-1.amazonaws.com",
            "Description": "(Optional) URL to the CloudFormation Endpoint. e.g. https://cloudformation.us-east-1.amazonaws.com",
            "Type": "String"
        },
        "EpelRepo": {
            "AllowedPattern": "^[a-z][a-z0-9-]*$",
            "ConstraintDescription": "An alphanumeric string that represents the EPEL yum repo's label.",
            "Default": "epel",
            "Description": "Name of network's EPEL repo.",
            "Type": "String"
        },
        "InstallToolScriptURL": {
            "Default": "",
            "Description": "S3 URL of the script which executes commands to install various tools.",
            "Type": "String"
        },
        "InstanceRole": {
            "Default": "",
            "Description": "(Optional) IAM instance role to apply to the instance",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "c4.large",
                "c4.xlarge",
                "m4.large",
                "m4.xlarge"
            ],
            "Default": "t2.micro",
            "Description": "Amazon EC2 instance type",
            "Type": "String"
        },
        "KeyPairName": {
            "Default": "",
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NoPublicIp": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "Default": "true",
            "Description": "Controls whether to assign the instance a public IP. Recommended to leave at \"true\" _unless_ launching in a public subnet",
            "Type": "String"
        },
        "NoReboot": {
            "AllowedValues": [
                "false",
                "true"
            ],
            "Default": "false",
            "Description": "Controls whether to reboot the instance as the last step of cfn-init execution",
            "Type": "String"
        },
        "PipRpm": {
            "Default": "python2-pip",
            "Description": "Name of preferred pip RPM.",
            "Type": "String"
        },
        "PrivateIp": {
            "Default": "",
            "Description": "(Optional) Set a static, primary private IP. Leave blank to auto-select a free IP",
            "Type": "String"
        },
        "ProvisionUser": {
            "Default": "maintuser",
            "Description": "Default login user account name.",
            "MaxLength": "32",
            "MinLength": "8",
            "Type": "String"
        },
        "PyStache": {
            "Default": "pystache",
            "Description": "Name of preferred pystache RPM.",
            "Type": "String"
        },
        "PypiIndexUrl": {
            "AllowedPattern": "^http[s]?://.*$",
            "Default": "https://pypi.org/simple",
            "Description": "URL to the PyPi Index",
            "Type": "String"
        },
        "RootVolumeSize": {
            "ConstraintDescription": "Must be between 20GB and 16384GB.",
            "Default": "30",
            "Description": "Size in GB of the EBS volume to create. If smaller than AMI defaul, create operation will fail; If larger, root device-volume's partition size will be increased",
            "MaxValue": "16384",
            "MinValue": "20",
            "Type": "Number"
        },
        "SecurityGroupIds": {
            "Description": "List of security groups to apply to the instance.",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "SubnetId": {
            "Default": "",
            "Description": "ID of the subnet to assign to the instance.",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "ToolsURL": {
            "Default": "",
            "Description": "S3 URL of the archive file (in tar.gz format) where contains the binary files to be installed on the EC2.",
            "Type": "String"
        },
        "VNCServerPasswd": {
            "ConstraintDescription": "Password must contain at least one letter, at least one number, and be longer than six characters.",
            "Default": "",
            "Description": "Default VNC server password",
            "Type": "String"
        },
        "WatchmakerConfig": {
            "AllowedPattern": "^$|^http[s]?://.*$",
            "Default": "",
            "Description": "(Optional) URL to a Watchmaker config file",
            "Type": "String"
        },
        "WatchmakerEnvironment": {
            "AllowedValues": [
                "",
                "dev",
                "test",
                "prod"
            ],
            "Default": "dev",
            "Description": "Environment in which the instance is being deployed",
            "Type": "String"
        },
        "WorkstationUserName": {
            "ConstraintDescription": "Alphanumeric string between 8 and 32 characters.",
            "Default": "",
            "Description": "User name of the workstation owner.",
            "Type": "String"
        },
        "WorkstationUserPasswd": {
            "Default": "",
            "Description": "Default password of the workstation owner",
            "Type": "String"
        }
    },
    "Resources": {
        "Ec2Instance": {
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT45M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "Fn::If": [
                        "AssignInstanceRole",
                        {
                            "Ec2IamRole": {
                                "roleName": {
                                    "Ref": "InstanceRole"
                                },
                                "type": "S3"
                            }
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "AWS::CloudFormation::Init": {
                    "admkey-install": {
                        "commands": {
                            "1-install-keyfile": {
                                "command": "bash -xe /etc/cfn/scripts/admkey.sh"
                            }
                        }
                    },
                    "configSets": {
                        "launch": [
                            "setup",
                            "admkey-install",
                            "watchmaker-install",
                            "watchmaker-launch",
                            "tools-install",
                            "finalize",
                            {
                                "Fn::If": [
                                    "Reboot",
                                    "reboot",
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            }
                        ]
                    },
                    "finalize": {
                        "commands": {
                            "10-signal-success": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "/opt/aws/bin/cfn-signal -e 0",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource Ec2Instance",
                                            {
                                                "Fn::If": [
                                                    "AssignInstanceRole",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --role ",
                                                                {
                                                                    "Ref": "InstanceRole"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            {
                                                "Fn::If": [
                                                    "UseCfnUrl",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --url ",
                                                                {
                                                                    "Ref": "CfnEndpointUrl"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "ignoreErrors": "true"
                            }
                        }
                    },
                    "reboot": {
                        "commands": {
                            "10-reboot": {
                                "command": "shutdown -r +1 &"
                            }
                        }
                    },
                    "setup": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            {
                                                "Fn::If": [
                                                    "AssignInstanceRole",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                "role=",
                                                                {
                                                                    "Ref": "InstanceRole"
                                                                },
                                                                "\n"
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            {
                                                "Fn::If": [
                                                    "UseCfnUrl",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                "url=",
                                                                {
                                                                    "Ref": "CfnEndpointUrl"
                                                                },
                                                                "\n"
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            "interval=1",
                                            "\n",
                                            "verbose=true",
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/etc/cfn/files/adminkeys.pub": {
                                "authentication": "Ec2IamRole",
                                "group": "root",
                                "mode": "000600",
                                "owner": "root",
                                "source": {
                                    "Ref": "AdminPubkeyURL"
                                }
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.Ec2Instance.Metadata\n",
                                            "action=/opt/aws/bin/cfn-init -v -c update",
                                            " --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            " --resource Ec2Instance",
                                            {
                                                "Fn::If": [
                                                    "AssignInstanceRole",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --role ",
                                                                {
                                                                    "Ref": "InstanceRole"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            {
                                                "Fn::If": [
                                                    "UseCfnUrl",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --url ",
                                                                {
                                                                    "Ref": "CfnEndpointUrl"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            " --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/etc/cfn/scripts/admkey.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n\n",
                                            "PROVHOME=$(getent passwd ",
                                            {
                                                "Ref": "ProvisionUser"
                                            },
                                            " | awk -F\":\" '{print $6}')\n",
                                            "\n",
                                            "install -b -m 000600 -o ",
                                            {
                                                "Ref": "ProvisionUser"
                                            },
                                            " -g ",
                                            {
                                                "Ref": "ProvisionUser"
                                            },
                                            " /etc/cfn/files/adminkeys.pub",
                                            " ${PROVHOME}/.ssh/authorized_keys\n",
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000700",
                                "owner": "root"
                            },
                            "/etc/cfn/scripts/watchmaker-install.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n\n",
                                            "PYPI_URL=",
                                            {
                                                "Ref": "PypiIndexUrl"
                                            },
                                            "\n",
                                            "PYPI_HOST=$(echo $PYPI_URL |sed -e \"s/[^/]*\\/\\/\\([^@]*@\\)\\?\\([^:/]*\\).*/\\2/\")\n",
                                            "pip install",
                                            " --index-url=\"$PYPI_URL\"",
                                            " --trusted-host=\"$PYPI_HOST\"",
                                            " --allow-all-external",
                                            " --upgrade pip setuptools watchmaker\n\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000700",
                                "owner": "root"
                            },
                            "/etc/cfn/scripts/ws-tools.sh": {
                                "authentication": "Ec2IamRole",
                                "group": "root",
                                "mode": "000700",
                                "owner": "root",
                                "source": {
                                    "Ref": "InstallToolScriptURL"
                                }
                            },
                            "/etc/cfn/tools/tools.tar.gz": {
                                "authentication": "Ec2IamRole",
                                "group": "root",
                                "mode": "000700",
                                "owner": "root",
                                "source": {
                                    "Ref": "ToolsURL"
                                }
                            },
                            "/etc/cfn/ws-tools.envs": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "WORKSTATION_USER_NAME=",
                                            {
                                                "Ref": "WorkstationUserName"
                                            },
                                            "\n",
                                            "VNC_SEREVER_PASSWD=",
                                            {
                                                "Ref": "VNCServerPasswd"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000444",
                                "owner": "root"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "tools-install": {
                        "commands": {
                            "1-tools-install": {
                                "command": "bash -xe /etc/cfn/scripts/ws-tools.sh"
                            }
                        }
                    },
                    "watchmaker-install": {
                        "commands": {
                            "10-watchmaker-install": {
                                "command": "bash -xe /etc/cfn/scripts/watchmaker-install.sh"
                            }
                        }
                    },
                    "watchmaker-launch": {
                        "commands": {
                            "10-watchmaker-launch": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "watchmaker --log-level debug",
                                            " --log-dir /var/log/watchmaker",
                                            " --no-reboot",
                                            {
                                                "Fn::If": [
                                                    "UseWamConfig",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --config \"",
                                                                {
                                                                    "Ref": "WatchmakerConfig"
                                                                },
                                                                "\""
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            },
                                            {
                                                "Fn::If": [
                                                    "UseEnvironment",
                                                    {
                                                        "Fn::Join": [
                                                            "",
                                                            [
                                                                " --env \"",
                                                                {
                                                                    "Ref": "WatchmakerEnvironment"
                                                                },
                                                                "\""
                                                            ]
                                                        ]
                                                    },
                                                    ""
                                                ]
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": true,
                            "VolumeSize": {
                                "Ref": "RootVolumeSize"
                            },
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Fn::If": [
                        "AssignInstanceRole",
                        {
                            "Ref": "InstanceRole"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "ImageId": {
                    "Ref": "AmiId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": {
                            "Fn::If": [
                                "AssignPublicIp",
                                true,
                                false
                            ]
                        },
                        "DeviceIndex": "0",
                        "GroupSet": {
                            "Ref": "SecurityGroupIds"
                        },
                        "PrivateIpAddress": {
                            "Fn::If": [
                                "AssignStaticPrivateIp",
                                {
                                    "Ref": "PrivateIp"
                                },
                                {
                                    "Ref": "AWS::NoValue"
                                }
                            ]
                        },
                        "SubnetId": {
                            "Ref": "SubnetId"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "system_info:\n",
                                "  default_user:\n",
                                "    name: ",
                                {
                                    "Ref": "ProvisionUser"
                                },
                                "\n",
                                "\n",
                                "users:\n",
                                "  - default\n",
                                "  - name: ",
                                {
                                    "Ref": "WorkstationUserName"
                                },
                                "\n",
                                "    lock-passwd: False\n",
                                "\n",
                                "chpasswd:\n",
                                "  expire: False\n",
                                "  list: |\n",
                                {
                                    "Ref": "WorkstationUserName"
                                },
                                ": ",
                                {
                                    "Ref": "WorkstationUserPasswd"
                                },
                                "\n",
                                "\n",
                                "growpart:\n",
                                "  mode: auto\n",
                                "  devices: [ '/dev/xvda', '/dev/xvda2', '/dev/nvme0n1p2' ]\n",
                                "  ignore_growroot_disabled: false\n",
                                "\n",
                                "runcmd:\n",
                                "  - |-\n",
                                "      # Extend any available LVM PVs\n",
                                "      if [[ -x $( which pvs ) ]]\n",
                                "      then\n",
                                "        LVMPVS=($(pvs --noheadings -o pv_name))\n",
                                "        for PV in \"${LVMPVS[@]}\"\n",
                                "          do\n",
                                "            pvresize ${PV}\n",
                                "          done\n",
                                "        \n",
                                "        vgdisplay -s\n",
                                "        # Extend the root and home volume by 10 GB\n",
                                "        \n",
                                "        lvextend --size +20G --resizefs /dev/VolGroup00/rootVol\n",
                                "        lvextend --size +10G --resizefs /dev/mapper/VolGroup00-homeVol\n",
                                "        lvscan\n",
                                "      fi\n",
                                "      \n",
                                "      # Export cert bundle ENVs\n",
                                "      export AWS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                                "      export REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt\n",
                                "      \n",
                                "      # Error-logging helper-function\n",
                                "      function err_exit {\n",
                                "         echo \"${1}\"\n",
                                "         logger -p kern.crit -t UserData \"${1}\"\n",
                                "         /opt/aws/bin/cfn-signal -e 1 --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource Ec2instance\n",
                                "         exit 1\n",
                                "      }\n",
                                "      \n",
                                "      \n",
                                "      # Install RPMs needed by the cfn-tools.\n",
                                "      yum --enablerepo=",
                                {
                                    "Ref": "EpelRepo"
                                },
                                " install -y ",
                                {
                                    "Ref": "PyStache"
                                },
                                " ",
                                {
                                    "Ref": "PipRpm"
                                },
                                " || err_exit 'Could not install Cfn dependencies.'\n",
                                "      \n",
                                "      # Update cfn-bootstrapper hash method\n",
                                "      PYVERS=$(python -c 'import sys;",
                                " version=sys.version_info[:2];",
                                " print(\"{0}.{1}\".format(*version))')\n",
                                "      sed -i '/^[ \\t][ \\t]*self._etag/s/etag$/None/'",
                                " /usr/lib/python${PYVERS}/site-packages/cfnbootstrap",
                                "/util.py\n",
                                "      \n",
                                "      # Execute cfn-init\n",
                                "      /opt/aws/bin/cfn-init -v -c launch",
                                " --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource Ec2Instance",
                                {
                                    "Fn::If": [
                                        "AssignInstanceRole",
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    " --role ",
                                                    {
                                                        "Ref": "InstanceRole"
                                                    }
                                                ]
                                            ]
                                        },
                                        ""
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "UseCfnUrl",
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    " --url ",
                                                    {
                                                        "Ref": "CfnEndpointUrl"
                                                    }
                                                ]
                                            ]
                                        },
                                        ""
                                    ]
                                },
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || err_exit echo 'cfn-init FAILED! Aborting!'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        }
    }
}
